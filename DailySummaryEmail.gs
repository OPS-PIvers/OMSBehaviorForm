/**
 * Daily Summary Email System
 * Sends a daily summary of behavior form submissions to administrators at 3PM
 */

/**
 * Main function triggered by the time-based trigger at 3PM
 * Gathers all submissions for the day and sends a summary email
 */
function sendDailySummaryEmail() {
  try {
    Logger.log("Running daily summary email function");
    
    // Get today's submissions
    const todaysSubmissions = getTodaysSubmissions();
    
    // If no submissions today, still send a report but note this
    if (todaysSubmissions.length === 0) {
      Logger.log("No submissions found for today");
      sendEmptyDailySummary();
      return;
    }
    
    // Calculate statistics
    const stats = calculateStatistics(todaysSubmissions);
    
    // Generate HTML email content
    const emailHTML = createSummaryEmailHTML(todaysSubmissions, stats);
    
    // Send the email to administrators
    sendEmailToAdmins(emailHTML);
    
    Logger.log("Daily summary email sent successfully");
  } catch (error) {
    Logger.log("Error in sendDailySummaryEmail: " + error.toString());
    Logger.log("Stack trace: " + error.stack);
    
    // Send error notification to tech support or admin
    try {
      MailApp.sendEmail({
        to: Session.getEffectiveUser().getEmail(),
        subject: "ERROR: Behavior System Daily Summary Failed",
        body: "The daily summary email failed to send. Error: " + error.toString()
      });
    } catch (e) {
      Logger.log("Failed to send error notification: " + e.toString());
    }
  }
}

/**
 * Sends a summary email when there are no submissions for the day
 */
function sendEmptyDailySummary() {
  const today = new Date();
  const formattedDate = Utilities.formatDate(today, Session.getScriptTimeZone(), "MMMM d, yyyy");
  
  const emailHTML = `
    <html>
    <head>
      <style>
        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; color: #333; }
        .container { max-width: 600px; margin: 0 auto; }
        h1 { color: #2c3e50; margin-bottom: 20px; }
        .empty-notice { background-color: #f8f9fa; padding: 20px; border-radius: 5px; text-align: center; }
        .footer { margin-top: 30px; font-size: 12px; color: #7f8c8d; text-align: center; }
      </style>
    </head>
    <body>
      <div class="container">
        <h1>Daily Behavior Report - ${formattedDate}</h1>
        <div class="empty-notice">
          <h3>No behavior submissions were recorded today.</h3>
          <p>This is an automated message from the Behavior Reporting System.</p>
        </div>
        <div class="footer">
          <p>This report was automatically generated by the ${CONFIG.SCHOOL_NAME} Behavior System.</p>
        </div>
      </div>
    </body>
    </html>
  `;
  
  sendEmailToAdmins(emailHTML, "Daily Behavior Report - " + formattedDate + " (No Submissions)");
}

/**
 * Gets all submissions from today
 * @return {Array} Array of submission objects
 */
function getTodaysSubmissions() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName(CONFIG.SHEET_NAMES.BEHAVIOR_FORM);
  
  if (!sheet) {
    Logger.log("Behavior Form sheet not found");
    return [];
  }
  
  // Get all data with header row
  const data = sheet.getDataRange().getValues();
  if (data.length <= 1) {
    // Only header row exists, no submissions
    return [];
  }
  
  // Get column indices
  const headers = data[0];
  const timestampCol = headers.indexOf("Timestamp");
  
  if (timestampCol === -1) {
    Logger.log("Timestamp column not found in sheet");
    return [];
  }
  
  // Get today's date at midnight for comparison
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  
  // Filter for today's submissions
  const todaysSubmissions = [];
  for (let i = 1; i < data.length; i++) {
    const row = data[i];
    const timestamp = row[timestampCol];
    
    // Skip if no timestamp or invalid date
    if (!timestamp || !(timestamp instanceof Date) || isNaN(timestamp.getTime())) {
      continue;
    }
    
    // Check if submission is from today
    const submissionDate = new Date(timestamp);
    submissionDate.setHours(0, 0, 0, 0);
    
    if (submissionDate.getTime() === today.getTime()) {
      // Create submission object with all column data
      const submission = {};
      headers.forEach((header, index) => {
        submission[header] = row[index];
      });
      
      todaysSubmissions.push(submission);
    }
  }
  
  return todaysSubmissions;
}

/**
 * Gets all submissions for historical statistics
 * @return {Object} Object with good news and stop & think counts
 */
function getAllSubmissions() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName(CONFIG.SHEET_NAMES.BEHAVIOR_FORM);
  
  if (!sheet) {
    Logger.log("Behavior Form sheet not found");
    return { goodNews: 0, stopThink: 0 };
  }
  
  // Get all data with header row
  const data = sheet.getDataRange().getValues();
  if (data.length <= 1) {
    // Only header row exists, no submissions
    return { goodNews: 0, stopThink: 0 };
  }
  
  // Get column indices
  const headers = data[0];
  const behaviorTypeCol = headers.indexOf("Which type of behavior are you documenting?");
  
  if (behaviorTypeCol === -1) {
    Logger.log("Behavior type column not found in sheet");
    return { goodNews: 0, stopThink: 0 };
  }
  
  // Count good news and stop & think submissions
  let goodNewsCount = 0;
  let stopThinkCount = 0;
  
  for (let i = 1; i < data.length; i++) {
    const row = data[i];
    const behaviorType = row[behaviorTypeCol] || "";
    
    if (typeof behaviorType === 'string') {
      if (behaviorType.includes("Good News")) {
        goodNewsCount++;
      } else if (behaviorType.includes("Stop & Think")) {
        stopThinkCount++;
      }
    }
  }
  
  return { goodNews: goodNewsCount, stopThink: stopThinkCount };
}

/**
 * Calculates statistics for the daily summary
 * @param {Array} submissions Today's submissions
 * @return {Object} Statistics object
 */
function calculateStatistics(submissions) {
  // Get counts for today's submissions
  let dailyGoodNews = 0;
  let dailyStopThink = 0;
  
  submissions.forEach(submission => {
    const behaviorType = submission["Which type of behavior are you documenting?"] || "";
    
    if (typeof behaviorType === 'string') {
      if (behaviorType.includes("Good News")) {
        dailyGoodNews++;
      } else if (behaviorType.includes("Stop & Think")) {
        dailyStopThink++;
      }
    }
  });
  
  const dailyTotal = dailyGoodNews + dailyStopThink;
  
  // Calculate daily percentages (handle division by zero)
  const dailyGoodNewsPercent = dailyTotal > 0 ? Math.round((dailyGoodNews / dailyTotal) * 100) : 0;
  const dailyStopThinkPercent = dailyTotal > 0 ? Math.round((dailyStopThink / dailyTotal) * 100) : 0;
  
  // Get all-time statistics
  const allStats = getAllSubmissions();
  const totalGoodNews = allStats.goodNews;
  const totalStopThink = allStats.stopThink;
  const totalSubmissions = totalGoodNews + totalStopThink;
  
  // Calculate total percentages
  const totalGoodNewsPercent = totalSubmissions > 0 ? Math.round((totalGoodNews / totalSubmissions) * 100) : 0;
  const totalStopThinkPercent = totalSubmissions > 0 ? Math.round((totalStopThink / totalSubmissions) * 100) : 0;
  
  return {
    daily: {
      goodNews: dailyGoodNews,
      stopThink: dailyStopThink,
      total: dailyTotal,
      goodNewsPercent: dailyGoodNewsPercent,
      stopThinkPercent: dailyStopThinkPercent
    },
    total: {
      goodNews: totalGoodNews,
      stopThink: totalStopThink,
      total: totalSubmissions,
      goodNewsPercent: totalGoodNewsPercent,
      stopThinkPercent: totalStopThinkPercent
    }
  };
}

/**
 * Creates the HTML content for the summary email
 * @param {Array} submissions Today's submissions
 * @param {Object} stats Statistics object
 * @return {string} HTML email content
 */
function createSummaryEmailHTML(submissions, stats) {
  const today = new Date();
  const formattedDate = Utilities.formatDate(today, Session.getScriptTimeZone(), "MMMM d, yyyy");
  
  // Separate submissions by type
  const goodNewsSubmissions = [];
  const stopThinkSubmissions = [];
  
  submissions.forEach(submission => {
    const behaviorType = submission["Which type of behavior are you documenting?"] || "";
    
    if (typeof behaviorType === 'string') {
      if (behaviorType.includes("Good News")) {
        goodNewsSubmissions.push(submission);
      } else if (behaviorType.includes("Stop & Think")) {
        stopThinkSubmissions.push(submission);
      }
    }
  });
  
  // Create HTML for statistics
  const statsHTML = `
    <div class="stats-container">
      <h2>Today's Summary (${formattedDate})</h2>
      <div class="stats-grid">
        <div class="stat-box good-news">
          <div class="stat-title">Good News</div>
          <div class="stat-value">${stats.daily.goodNews}</div>
          <div class="stat-percent">${stats.daily.goodNewsPercent}% of today</div>
        </div>
        <div class="stat-box stop-think">
          <div class="stat-title">Stop &amp; Think</div>
          <div class="stat-value">${stats.daily.stopThink}</div>
          <div class="stat-percent">${stats.daily.stopThinkPercent}% of today</div>
        </div>
        <div class="stat-box total">
          <div class="stat-title">Total</div>
          <div class="stat-value">${stats.daily.total}</div>
          <div class="stat-percent">100%</div>
        </div>
      </div>
      
      <h2>All-Time Statistics</h2>
      <div class="stats-grid">
        <div class="stat-box good-news">
          <div class="stat-title">Good News</div>
          <div class="stat-value">${stats.total.goodNews}</div>
          <div class="stat-percent">${stats.total.goodNewsPercent}% of total</div>
        </div>
        <div class="stat-box stop-think">
          <div class="stat-title">Stop &amp; Think</div>
          <div class="stat-value">${stats.total.stopThink}</div>
          <div class="stat-percent">${stats.total.stopThinkPercent}% of total</div>
        </div>
        <div class="stat-box total">
          <div class="stat-title">Total</div>
          <div class="stat-value">${stats.total.total}</div>
          <div class="stat-percent">100%</div>
        </div>
      </div>
    </div>
  `;
  
  // Create HTML for Good News table
  let goodNewsTableHTML = "";
  if (goodNewsSubmissions.length > 0) {
    goodNewsTableHTML = `
      <h2 class="section-header good-news">Good News Submissions (${goodNewsSubmissions.length})</h2>
      <div class="table-container">
        <table class="submissions-table">
          <thead>
            <tr>
              <th>Time</th>
              <th>Teacher</th>
              <th>Student</th>
              <th>Location</th>
              <th>Pillars</th>
              <th>Behaviors</th>
              <th>Comments</th>
            </tr>
          </thead>
          <tbody>
            ${createTableRows(goodNewsSubmissions, 'good-news')}
          </tbody>
        </table>
      </div>
    `;
  } else {
    goodNewsTableHTML = `
      <h2 class="section-header good-news">Good News Submissions (0)</h2>
      <p class="empty-section">No Good News submissions today.</p>
    `;
  }
  
  // Create HTML for Stop & Think table
  let stopThinkTableHTML = "";
  if (stopThinkSubmissions.length > 0) {
    stopThinkTableHTML = `
      <h2 class="section-header stop-think">Stop &amp; Think Submissions (${stopThinkSubmissions.length})</h2>
      <div class="table-container">
        <table class="submissions-table">
          <thead>
            <tr>
              <th>Time</th>
              <th>Teacher</th>
              <th>Student</th>
              <th>Location</th>
              <th>Pillars</th>
              <th>Behaviors</th>
              <th>Comments</th>
            </tr>
          </thead>
          <tbody>
            ${createTableRows(stopThinkSubmissions, 'stop-think')}
          </tbody>
        </table>
      </div>
    `;
  } else {
    stopThinkTableHTML = `
      <h2 class="section-header stop-think">Stop &amp; Think Submissions (0)</h2>
      <p class="empty-section">No Stop &amp; Think submissions today.</p>
    `;
  }
  
  // Combine all parts into the final HTML email
  const emailHTML = `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Daily Behavior Report - ${formattedDate}</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          line-height: 1.6;
          color: #333;
          margin: 0;
          padding: 20px;
          background-color: #f9f9f9;
        }
        .container {
          max-width: 1000px;
          margin: 0 auto;
          background-color: #fff;
          padding: 30px;
          border-radius: 8px;
          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }
        h1 {
          color: #2c3e50;
          margin-top: 0;
          border-bottom: 2px solid #eee;
          padding-bottom: 10px;
        }
        h2 {
          margin-top: 30px;
          margin-bottom: 15px;
          color: #34495e;
        }
        .section-header {
          padding: 10px 15px;
          border-radius: 5px;
          margin-top: 40px;
        }
        .section-header.good-news {
          background-color: #d4edda;
          color: #155724;
        }
        .section-header.stop-think {
          background-color: #f8d7da;
          color: #721c24;
        }
        .submissions-table {
          width: 100%;
          border-collapse: collapse;
          margin-bottom: 30px;
          font-size: 14px;
        }
        .submissions-table th, 
        .submissions-table td {
          padding: 12px 15px;
          text-align: left;
          border-bottom: 1px solid #ddd;
        }
        .submissions-table th {
          background-color: #f2f2f2;
          font-weight: bold;
        }
        .submissions-table tbody tr:hover {
          background-color: #f5f5f5;
        }
        .submissions-table tbody tr.good-news {
          border-left: 4px solid #28a745;
        }
        .submissions-table tbody tr.stop-think {
          border-left: 4px solid #dc3545;
        }
        .empty-section {
          padding: 20px;
          background-color: #f8f9fa;
          border-radius: 5px;
          text-align: center;
          font-style: italic;
          color: #6c757d;
        }
        .stats-container {
          margin-bottom: 30px;
          background-color: #f8f9fa;
          padding: 20px;
          border-radius: 8px;
        }
        .stats-grid {
          display: grid;
          grid-template-columns: repeat(3, 1fr);
          gap: 15px;
          margin-bottom: 25px;
        }
        .stat-box {
          background-color: #fff;
          padding: 15px;
          border-radius: 8px;
          box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
          text-align: center;
        }
        .stat-box.good-news {
          border-top: 5px solid #28a745;
        }
        .stat-box.stop-think {
          border-top: 5px solid #dc3545;
        }
        .stat-box.total {
          border-top: 5px solid #007bff;
        }
        .stat-title {
          font-weight: bold;
          margin-bottom: 8px;
          font-size: 14px;
          color: #6c757d;
        }
        .stat-value {
          font-size: 28px;
          font-weight: bold;
          margin-bottom: 5px;
          color: #343a40;
        }
        .stat-percent {
          font-size: 14px;
          color: #6c757d;
        }
        .footer {
          margin-top: 40px;
          padding-top: 20px;
          border-top: 1px solid #eee;
          text-align: center;
          font-size: 12px;
          color: #7f8c8d;
        }
        .table-container {
          overflow-x: auto;
        }
        
        /* Responsive adjustments */
        @media (max-width: 768px) {
          .stats-grid {
            grid-template-columns: 1fr;
          }
          .submissions-table th,
          .submissions-table td {
            padding: 8px 10px;
            font-size: 12px;
          }
        }
      </style>
    </head>
    <body>
      <div class="container">
        <h1>Daily Behavior Report - ${formattedDate}</h1>
        
        ${statsHTML}
        
        ${goodNewsTableHTML}
        
        ${stopThinkTableHTML}
        
        <div class="footer">
          <p>This report was automatically generated by the ${CONFIG.SCHOOL_NAME} Behavior System.</p>
          <p>Sent at ${Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "hh:mm a")}.</p>
        </div>
      </div>
    </body>
    </html>
  `;
  
  return emailHTML;
}

/**
 * Helper function to create table rows from submissions
 * @param {Array} submissions Array of submission objects
 * @param {string} rowClass CSS class to apply to rows
 * @return {string} HTML for table rows
 */
function createTableRows(submissions, rowClass) {
  if (!submissions || submissions.length === 0) {
    return '';
  }
  
  let rowsHTML = '';
  
  submissions.forEach(submission => {
    // Parse timestamp and format it
    const timestamp = submission['Timestamp'];
    const timeStr = timestamp instanceof Date ? 
      Utilities.formatDate(timestamp, Session.getScriptTimeZone(), "h:mm a") : 
      "Unknown";
    
    // Get other fields with fallbacks for missing data
    const teacherName = submission['Your Name'] || submission['Email Address'] || "Unknown";
    const studentName = (submission['Student First'] || '') + ' ' + (submission['Student Last'] || '');
    const location = submission['Location (Good News)'] || submission['Location (Stop and Think)'] || submission['location'] || "Not specified";
    const pillars = submission['selectedPillars'] || "Not specified";
    const behaviors = submission['Good News Behaviors'] || submission['Stop and Think Behaviors'] || submission['selectedBehaviors'] || "Not specified";
    const comments = submission['Additional comments about the selected "Good News" behavior:'] || 
                    submission['Additional comments about the selected "Stop and Think" behavior:'] || 
                    submission['comments'] || "";
    
    // Create a table row
    rowsHTML += `
      <tr class="${rowClass}">
        <td>${timeStr}</td>
        <td>${escapeHTML(teacherName)}</td>
        <td>${escapeHTML(studentName)}</td>
        <td>${escapeHTML(location)}</td>
        <td>${escapeHTML(pillars)}</td>
        <td>${escapeHTML(behaviors)}</td>
        <td>${escapeHTML(comments)}</td>
      </tr>
    `;
  });
  
  return rowsHTML;
}

/**
 * Helper function to escape HTML special characters
 * @param {string} text Text to escape
 * @return {string} Escaped text
 */
function escapeHTML(text) {
  if (text === null || text === undefined) {
    return '';
  }
  
  return String(text)
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#039;');
}

/**
 * Sends the summary email to administrators
 * @param {string} htmlBody HTML body of the email
 * @param {string} [subject] Optional custom subject line
 */
function sendEmailToAdmins(htmlBody, subject) {
  // Default subject if not provided
  if (!subject) {
    const today = new Date();
    const formattedDate = Utilities.formatDate(today, Session.getScriptTimeZone(), "MMMM d, yyyy");
    subject = "Daily Behavior Report - " + formattedDate;
  }
  
  // Build recipients list
  const recipients = [];
  if (CONFIG.ADMIN_EMAILS.PRINCIPAL) recipients.push(CONFIG.ADMIN_EMAILS.PRINCIPAL);
  if (CONFIG.ADMIN_EMAILS.ASSOCIATE_PRINCIPAL) recipients.push(CONFIG.ADMIN_EMAILS.ASSOCIATE_PRINCIPAL);
  
  // Check if we have recipients
  if (recipients.length === 0) {
    Logger.log("No admin recipients found in CONFIG");
    return;
  }
  
  // Send email
  MailApp.sendEmail({
    to: recipients.join(','),
    subject: subject,
    htmlBody: htmlBody,
    noReply: true
  });
  
  Logger.log(`Summary email sent to: ${recipients.join(', ')}`);
}

/**
 * Creates a time-based trigger to run the daily summary at 3PM
 */
function createDailySummaryTrigger() {
  // First remove any existing triggers to avoid duplicates
  removeDailySummaryTrigger();
  
  // Create a new trigger to run at 3:00 PM every day
  const trigger = ScriptApp.newTrigger('sendDailySummaryEmail')
    .timeBased()
    .atHour(15)  // 3:00 PM (15:00)
    .everyDays(1)
    .create();
  
  Logger.log(`Daily summary trigger created with ID: ${trigger.getUniqueId()}`);
  
  return trigger;
}

/**
 * Removes the daily summary trigger if it exists
 */
function removeDailySummaryTrigger() {
  const triggers = ScriptApp.getProjectTriggers();
  
  for (let i = 0; i < triggers.length; i++) {
    const trigger = triggers[i];
    if (trigger.getHandlerFunction() === 'sendDailySummaryEmail') {
      ScriptApp.deleteTrigger(trigger);
      Logger.log(`Removed existing daily summary trigger with ID: ${trigger.getUniqueId()}`);
    }
  }
}

/**
 * Checks if the daily summary trigger exists, creates it if not
 * @return {Object} Status object with information about trigger
 */
function checkAndCreateDailySummaryTrigger() {
  const triggers = ScriptApp.getProjectTriggers();
  let summaryTriggerExists = false;
  
  for (let i = 0; i < triggers.length; i++) {
    const trigger = triggers[i];
    if (trigger.getHandlerFunction() === 'sendDailySummaryEmail') {
      summaryTriggerExists = true;
      break;
    }
  }
  
  if (!summaryTriggerExists) {
    const newTrigger = createDailySummaryTrigger();
    return { 
      success: true, 
      message: "Daily summary trigger created to run at 3:00 PM daily." 
    };
  }
  
  return { 
    success: true, 
    message: "Daily summary trigger already exists and is scheduled to run at 3:00 PM daily." 
  };
}

/**
 * Run this function to manually send a test summary email
 */
function sendTestDailySummaryEmail() {
  try {
    // Call the daily summary function but with a specific message
    sendDailySummaryEmail();
    
    return {
      success: true,
      message: "Test summary email sent successfully to administrators."
    };
  } catch (error) {
    Logger.log("Error sending test email: " + error.toString());
    return {
      success: false,
      message: "Failed to send test email: " + error.message
    };
  }
}
